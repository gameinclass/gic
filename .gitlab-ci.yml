image: php:7.2-apache

# Estágios até a entrega do produto
stages:
  - build
  - test
  - deploy

build:
  stage: build
  cache:
    key: ${CI_COMMIT_REF_SLUG}-environment
    paths:
      - vendor/
      - .env
  artifacts:
    expire_in: 1h
    paths:
      - vendor/
      - .env
  script:
    # Instala o Git
    - apt install git
    # Instala o composer
    - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    - php -r "if (hash_file('sha384', 'composer-setup.php') === '93b54496392c062774670ac18b134c3b3a95e5a5e5c8f1a9f115f203b75bf9a129d5daa8ba6a13e2cc8a1da0806388a8') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
    - php composer-setup.php --filename=composer
    - php -r "unlink('composer-setup.php');"
    # Instala os pacotes da aplicação pelo composer
    - php composer install --prefer-dist --no-ansi --no-interaction --no-progress --no-scripts

codestyle:
  stage: test
  script:
    # Verificação do padrão PSR2.
    - vendor/bin/phpcs --standard=PSR2 --extensions=php app

phpunit:
  stage: test
  script:
    # Adicionado arquivo do banco para evitar erro no teste unitário
    - touch storage/database.sqlite
    # Teste unitário
    - vendor/bin/phpunit --coverage-text --colors=never

#e2e:
#  stage: test
#  script:
#    - rm -R /var/www
#    - ln -s $CI_PROJECT_DIR /var/www
#    - touch database/database.sqlite
#    - php artisan migrate
#    - /etc/init.d/apache2 start
#    - php artisan dusk
#   _______                       __
#  |       \                     |  \
#  | $$$$$$$\  ______    ______  | $$  ______   __    __
#  | $$  | $$ /      \  /      \ | $$ /      \ |  \  |  \
#  | $$  | $$|  $$$$$$\|  $$$$$$\| $$|  $$$$$$\| $$  | $$
#  | $$  | $$| $$    $$| $$  | $$| $$| $$  | $$| $$  | $$
#  | $$__/ $$| $$$$$$$$| $$__/ $$| $$| $$__/ $$| $$__/ $$
#  | $$    $$ \$$     \| $$    $$| $$ \$$    $$ \$$    $$
#   \$$$$$$$   \$$$$$$$| $$$$$$$  \$$  \$$$$$$  _\$$$$$$$
#                      | $$                    |  \__| $$
#                      | $$                     \$$    $$
#                      \$$                      \$$$$$$
.init_ssh: &init_ssh |
  eval $(ssh-agent -s)
  echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
  mkdir -p ~/.ssh
  chmod 700 ~/.ssh
  ssh-keyscan "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
  chmod 644 ~/.ssh/known_hosts
#deploy_review:
#  stage: deploy
#  script:
#    - echo "Enviando aplicação para revisão!"
#  environment:
#    name: review
#    url: http://review1.infocorpjr.com
#  only:
#    - branches
#  except:
#    - master

deploy_review:
  stage: deploy
  script:
    - *init_ssh
    - ssh -T suporte@"$SSH_KNOWN_HOSTS" < ./continuous_delivery/review.sh
  environment:
    name: review
    url: http://review1.infocorpjr.com
  only:
    - master

deploy_pre_production:
  stage: deploy
  script:
    - *init_ssh
    - ssh -T suporte@"$SSH_KNOWN_HOSTS" < ./continuous_delivery/pre_production.sh
  environment:
    name: pre_production
    url: http://nepes.infocorpjr.com
  when: manual
  only:
    - pre_production

deploy_production:
  stage: deploy
  script:
    - echo "A aplicação está indo para produção"
  environment:
    name: production
    url: https://example.com
  when: manual
  only:
    - production